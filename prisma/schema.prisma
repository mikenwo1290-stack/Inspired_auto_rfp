generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String             @id
  email             String             @unique
  name              String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  organizationUsers OrganizationUser[]
  uploadedTemplates ProposalTemplate[] @relation("UploadedTemplates")
  generatedProposals Proposal[]        @relation("GeneratedProposals")

  @@map("users")
}

model Organization {
  id                    String             @id @default(cuid())
  name                  String
  slug                  String             @unique
  description           String?
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  llamaCloudConnectedAt DateTime?
  llamaCloudProjectId   String?
  llamaCloudProjectName String?
  llamaCloudOrgName     String?
  knowledgeBases        KnowledgeBase[]
  organizationUsers     OrganizationUser[]
  projects              Project[]
  proposalTemplates     ProposalTemplate[]
  proposals             Proposal[]

  @@map("organizations")
}

model OrganizationUser {
  id             String       @id @default(cuid())
  role           String       @default("member")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  userId         String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([organizationId])
  @@map("organization_users")
}

model Project {
  id             String         @id @default(cuid())
  name           String
  description    String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  organizationId String
  summary        String?
  eligibility    String[]
  projectIndexes ProjectIndex[]
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  questions      Question[]

  @@index([organizationId])
  @@map("projects")
}

model ProjectIndex {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  indexId   String
  indexName String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, indexId])
  @@index([projectId])
  @@map("project_indexes")
}

model Question {
  id          String   @id @default(cuid())
  text        String
  topic       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  projectId   String
  referenceId String?
  answer      Answer?
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([projectId, referenceId])
  @@map("questions")
}

model Answer {
  id         String   @id @default(cuid())
  text       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  questionId String   @unique
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  sources    Source[]

  @@map("answers")
}

model Source {
  id          String   @id @default(cuid())
  fileName    String
  filePath    String?
  pageNumber  String?
  documentId  String?
  relevance   Int?
  textContent String?
  createdAt   DateTime @default(now())
  answerId    String
  answer      Answer   @relation(fields: [answerId], references: [id], onDelete: Cascade)

  @@index([answerId])
  @@map("sources")
}

model KnowledgeBase {
  id             String                  @id @default(cuid())
  name           String
  description    String?
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  organizationId String
  questions      KnowledgeBaseQuestion[]
  organization   Organization            @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@map("knowledge_bases")
}

model KnowledgeBaseQuestion {
  id              String               @id @default(cuid())
  text            String
  topic           String?
  tags            String[]
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  knowledgeBaseId String
  answer          KnowledgeBaseAnswer?
  knowledgeBase   KnowledgeBase        @relation(fields: [knowledgeBaseId], references: [id], onDelete: Cascade)

  @@index([knowledgeBaseId])
  @@map("knowledge_base_questions")
}

model KnowledgeBaseAnswer {
  id         String                @id @default(cuid())
  text       String
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt
  questionId String                @unique
  question   KnowledgeBaseQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("knowledge_base_answers")
}

model ProposalTemplate {
  id             String        @id @default(cuid())
  name           String
  description    String?
  fileKey        String
  fileSize       Int
  mimeType       String
  uploadedAt     DateTime      @default(now())
  organizationId String
  uploadedById   String?
  metadata       Json?
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  uploadedBy     User?         @relation("UploadedTemplates", fields: [uploadedById], references: [id], onDelete: SetNull)
  proposals      Proposal[]

  @@index([organizationId])
  @@map("proposal_templates")
}

model Proposal {
  id             String        @id @default(cuid())
  organizationId String
  templateId     String
  fileKey        String
  fileName       String
  fileSize       Int
  generatedAt    DateTime      @default(now())
  generatedById  String?
  status         String        @default("generated")
  data           Json
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  template       ProposalTemplate @relation(fields: [templateId], references: [id], onDelete: SetNull)
  generatedBy    User?         @relation("GeneratedProposals", fields: [generatedById], references: [id], onDelete: SetNull)

  @@index([organizationId])
  @@index([templateId])
  @@map("proposals")
}
